/*
* Brian R Taylor
* brian.taylor@bolderflight.com
* 
* Copyright (c) 2021 Bolder Flight Systems Inc
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the “Software”), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* This protobuf file describes the data log format, which is transpiled
* to a C header and source file for use in the flight code. There should
* only be a single message defined, DatalogMessage, which defines all
* of the data to be logged. The message structure should be flat
* (i.e. no nested messages), consisting of native types.
*/

syntax = "proto3";

/* Data log message */
message DatalogMessage {
  int32 sys_frame_time_us = 2;
  float sys_input_volt = 3;
  float sys_reg_volt = 4;
  float sys_pwm_volt = 5;
  float sys_sbus_volt = 6;
  int64 sys_time_us = 7;
  bool incept_new_data = 8;
  bool incept_lost_frame = 9;
  bool incept_failsafe = 10;
  bool incept_throttle_en = 11;
  int32 incept_mode0 = 12;
  int32 incept_mode1 = 13;
  int32 incept_mode2 = 14;
  int32 incept_mode3 = 15;
  float incept_throttle = 16;
  float incept_pitch = 17;
  float incept_roll = 18;
  float incept_yaw = 19;
  bool imu_new_data = 20;
  bool imu_new_mag_data = 21;
  bool imu_healthy = 22;
  bool imu_mag_healthy = 23;
  float imu_die_temp_c = 24;
  repeated float imu_accel_mps2 = 25;
  repeated float imu_gyro_radps = 26;
  repeated float imu_mag_ut = 27;
  bool gnss_new_data = 28;
  bool gnss_healthy = 29;
  int32 gnss_fix = 30;
  int32 gnss_num_sats = 31;
  int32 gnss_week = 32;
  int32 gnss_tow_ms = 33;
  float gnss_alt_wgs84_m = 34;
  float gnss_alt_msl_m = 35;
  float gnss_hdop = 36;
  float gnss_vdop = 37;
  float gnss_track_rad = 38;
  float gnss_spd_mps = 39;
  float gnss_horz_acc_m = 40;
  float gnss_vert_acc_m = 41;
  float gnss_vel_acc_mps = 42;
  float gnss_track_acc_rad = 43;
  repeated float gnss_ned_vel_mps = 44;
  double gnss_lat_rad = 45;
  double gnss_lon_rad = 46;
  bool fmu_pres_new_data = 47;
  bool fmu_pres_healthy = 48;
  float fmu_pres_pa = 49;
  float fmu_pres_die_temp_c = 50;
  bool static_pres_new_data = 51;
  bool static_pres_healthy = 52;
  float static_pres_pa = 53;
  float static_pres_die_temp_c = 54;
  bool diff_pres_new_data = 55;
  bool diff_pres_healthy = 56;
  float diff_pres_pa = 57;
  float diff_pres_die_temp_c = 58;
  bool nav_initialized = 59;
  float nav_pitch_rad = 60;
  float nav_roll_rad = 61;
  float nav_heading_rad = 62;
  float nav_alt_wgs84_m = 63;
  float nav_alt_msl_m = 64;
  float nav_alt_rel_m = 65;
  float nav_static_pres_pa = 66;
  float nav_diff_pres_pa = 67;
  float nav_alt_pres_m = 68;
  float nav_ias_mps = 69;
  float nav_gnd_spd_mps = 70;
  float nav_gnd_track_rad = 71;
  float nav_flight_path_rad = 72;
  repeated float nav_accel_bias_mps2 = 73;
  repeated float nav_gyro_bias_radps = 74;
  repeated float nav_accel_mps2 = 75;
  repeated float nav_gyro_radps = 76;
  repeated float nav_mag_ut = 77;
  repeated float nav_ned_pos_m = 78;
  repeated float nav_ned_vel_mps = 79;
  double nav_lat_rad = 80;
  double nav_lon_rad = 81;
  bool cntrl_waypoint_reached = 82;
  repeated float cntrl_sbus = 83;
  repeated float cntrl_pwm = 84;
  repeated float cntrl_aux = 85;
  int32 cntrl_mode = 86;
  repeated float telem_param = 87;
  int32 waypoint_frame = 88;
  int32 waypoint_cmd = 89;
  float waypoint_param1 = 90;
  float waypoint_param2 = 91;
  float waypoint_param3 = 92;
  float waypoint_param4 = 93;
  sint32 waypoint_x = 94;
  sint32 waypoint_y = 95;
  float waypoint_z = 96;
}
